{
	"types": {
		"__pHasIn": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__pHasOut": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__pHasWatercraft": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__pWatercraft": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pSource": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "counter",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			},
			{
				"name": "rate",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			},
			{
				"name": "steps_passed",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__pSegment": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__pSink": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "counter",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__pSchedule": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pSchedulable": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__phigher_priority_than": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pConfluence": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			},
			{
				"name": "mode",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			},
			{
				"name": "name",
				"type": "code",
				"default": "\"[PYTHON]\"\n\"Example:\t result = True\"\n\"Example:\t result = getAttr()\"\n\n\"[JAVASCRIPT]\"\n\"Example:\t true\"\n\"Example:\t getAttr()\""
			}
		],
		"__pis_located_in": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pin1": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pout1": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pout0": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pCurrItem": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__pcurr_item": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		],
		"__phighest_priority": [
			{
				"name": "__pLabel",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotIn",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pPivotOut",
				"type": "string",
				"default": ""
			},
			{
				"name": "__pMatchSubtypes",
				"type": "boolean",
				"default": true
			}
		]
	},
	"constraints": [
		{
			"name": "noAbstractInstances",
			"event": "pre-create",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nfalse",
			"targetType": "HasIn"
		},
		{
			"name": "noAbstractInstances",
			"event": "pre-create",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nfalse",
			"targetType": "HasOut"
		},
		{
			"name": "noAbstractInstances",
			"event": "pre-create",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nfalse",
			"targetType": "HasWatercraft"
		},
		{
			"name": "c_no_neg_counter",
			"event": "post-edit",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nparseInt(getAttr('counter')) >= 0",
			"targetType": "Source"
		},
		{
			"name": "c_no_neg_rate",
			"event": "post-edit",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nparseInt(getAttr('rate')) >= 0",
			"targetType": "Source"
		},
		{
			"name": "c_neighbor_is_a_segment",
			"event": "post-connect",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nlet link = getNeighbors('out', '*')[0];/*newline*/print(link);/*newline*/let neighbor = getNeighbors('out','*',link)[0];/*newline*/print(neighbor);/*newline*/getAllNodes(['/Formalisms/02_waterway/02_waterway/Segment']).includes(neighbor)",
			"targetType": "Source"
		},
		{
			"name": "c_no_neg_rate",
			"event": "post-edit",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nparseInt(getAttr('steps_passed')) >= 0",
			"targetType": "Source"
		},
		{
			"name": "c_no_looped_connection",
			"event": "post-connect",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nfor(let link of getNeighbors('out', '*')){getNeighbors('out','*',link)[0]!== getNeighbors('in','*', link)[0]}",
			"targetType": "Segment"
		},
		{
			"name": "c_no_neg_counter",
			"event": "post-edit",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\ngetAttr('counter') >= 0",
			"targetType": "Sink"
		},
		{
			"name": "c_incoming_neighbor_is_not_a_confluence",
			"event": "post-connect",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nlet ret = true;/*newline*/let out1LinkCount = getNeighbors('in', ['/Formalisms/02_waterway/02_waterway/out1']).length;/*newline*/ret = out1LinkCount === 0;/*newline*/let out0Link = getNeighbors('in', ['/Formalisms/02_waterway/02_waterway/out0'])[0];/*newline*/let out0Tail = getNeighbors('in', '*', out0Link)[0];/*newline*/let confluences = getAllNodes(['/Formalisms/02_waterway/02_waterway/Confluence']);/*newline*/ret = !confluences.includes(out0Tail);/*newline*/ret === true;/*newline*/",
			"targetType": "Sink"
		},
		{
			"name": "c_only_one_schedule_exists",
			"event": "post-create",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\ngetAllNodes(['/Formalisms/02_waterway/02_waterway/Schedule']).length === 1",
			"targetType": "Schedule"
		},
		{
			"name": "noAbstractInstances",
			"event": "pre-create",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nfalse",
			"targetType": "Schedulable"
		},
		{
			"name": "c_mode_is_zero_or_one",
			"event": "post-edit",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\ngetAttr('mode') === 0 || getAttr('mode') === 1",
			"targetType": "Confluence"
		},
		{
			"name": "c_no_looped_connection",
			"event": "post-connect",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nfor(let link of getNeighbors('out', '*')){getNeighbors('out','*',link)[0]!== getNeighbors('in','*', link)[0]}",
			"targetType": "Confluence"
		},
		{
			"name": "c_only_one_currItem_exists",
			"event": "post-create",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\ngetAllNodes(['/Formalisms/02_waterway/02_waterway/CurrItem']).length === 1",
			"targetType": "CurrItem"
		},
		{
			"name": "GC_every_segment_in_schedule_at_most_once",
			"event": "validate",
			"targetType": "*",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\n//\n//idea: we follow the schedule relations\n//  Loop detection: if the node we are currently at is already in the set of nodes, we have a cycle\n//  not all nodes in schedule: if we end early then not all nodes are visited and thus not all nodes are in schedule,\n//                             this can be detected by checking whether the set's size is the same as all the abstract \n//                             segments instances\n\n\nlet totalNodes = getAllNodes([\"/Formalisms/02_waterway/02_waterway/Sink\"]).length;\ntotalNodes += getAllNodes([\"/Formalisms/02_waterway/02_waterway/Segment\"]).length;\ntotalNodes += getAllNodes([\"/Formalisms/02_waterway/02_waterway/Confluence\"]).length;\ntotalNodes += getAllNodes([\"/Formalisms/02_waterway/02_waterway/Source\"]).length;\n\nlet ret = 1;\nlet mySet = new Set();\n\nlet scheduleNode = getAllNodes([\"/Formalisms/02_waterway/02_waterway/Schedule\"])[0];\nprint(\"got:\" +scheduleNode)\nif(scheduleNode !== undefined){\n\tlet highestPriorityEdge = getNeighbors('out', \"*\", scheduleNode)\n\tif(highestPriorityEdge !== undefined){\n\t\tprint(\"got out\");\n\t\t//get the segment the edge points to\n\t\tlet currNode = getNeighbors('out', \"*\", highestPriorityEdge);\n\t\tif(currNode !== undefined){\n\t\t\tmySet.add(currNode[0])\n\t\t\tfor(let i = 0; i < totalNodes-1; ++i){\n\t\t\t   print(currNode);\n\t\t\t\t\t\t\t\t//direction       type                                node we're performing this on\n\t\t\t   nextEdge = getNeighbors('out', '/Formalisms/02_waterway/02_waterway/higher_priority_than', currNode)[0];\n\t\t\t   currNode = getNeighbors('out', \"*\", nextEdge);\n\t\t\t   print(mySet.has(currNode));\n\t\t\t   if(mySet.has(currNode[0]) === true){\n\t\t\t\t  ret = 0;\n\t\t\t\t  break;\n\t\t\t   } \n\t\t\t   mySet.add(currNode[0]);\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tret = 0;\n\t\t}\n\t}\n\telse{\n\t\tret = 0;\n\t}\n}\nelse{\n\tret = 0;\n}\nprint(mySet)\nprint(\"ret: \" + ret +\"  setSize: \"+mySet.size+ \"  totalNodes: \" + totalNodes)\nmySet.size === totalNodes && ret === 1"
		},
		{
			"name": "GC_no_watercraft_disappears",
			"event": "validate",
			"targetType": "*",
			"code": "/* comment next line to enable this constraint */\nthrow \"IgnoredConstraint\"\nlet sinks = getAllNodes([\"/Formalisms/01_waterway/01_waterway/Sink\"]);\nlet sources = getAllNodes([\"/Formalisms/02_waterway/02_waterway/Source\"]);\nlet ships = getAllNodes([\"/Formalisms/02_waterway/02_waterway/Watercraft\"]).length;\n\nlet consumedShips = 0;\nfor(let sinkID of sinks){\n    consumedShips += getAttr('counter', sinkID)\n}\n\nlet generatedWatercraft = 0;\nfor(let sourceID of sources){\n    generatedWatercraft += getAttr('counter', sourceID)\n}\n\nprint(\"generated: \"+ generatedWatercraft);\nprint(\"consumed: \"+ consumedShips);\nprint(\"free ships: \"+ ships);\n(generatedWatercraft-consumedShips-ships) === 0"
		}
	],
	"actions": [
		{
			"name": "nameSource",
			"event": "post-connect",
			"code": "/* comment next line to enable this action */\nthrow \"IgnoredConstraint\"\nlet link = getNeighbors('out', '*')[0];/*newline*/print(link);/*newline*/let neighbor = getNeighbors('in','*',link)[0];/*newline*/print(neighbor);/*newline*/setAttr('name', 'Source_'+String(link));/*newline*/",
			"targetType": "__pSource"
		},
		{
			"name": "nameSegment",
			"event": "post-connect",
			"code": "/* comment next line to enable this action */\nthrow \"IgnoredConstraint\"\nlet link = getNeighbors('out', '*')[0];/*newline*/print(link);/*newline*/let neighbor = getNeighbors('in','*',link)[0];/*newline*/print(neighbor);/*newline*/setAttr('name', 'segment_'+String(link));/*newline*/",
			"targetType": "__pSegment"
		},
		{
			"name": "nameSink",
			"event": "post-connect",
			"code": "/* comment next line to enable this action */\nthrow \"IgnoredConstraint\"\nlet link = getNeighbors('out', '*')[0];/*newline*/print(link);/*newline*/let neighbor = getNeighbors('in','*',link)[0];/*newline*/print(neighbor);/*newline*/setAttr('name', 'sink_'+String(link));/*newline*/",
			"targetType": "__pSink"
		},
		{
			"name": "nameConfluence",
			"event": "post-connect",
			"code": "/* comment next line to enable this action */\nthrow \"IgnoredConstraint\"\nlet link = getNeighbors('out', '*')[0];/*newline*/print(link);/*newline*/let neighbor = getNeighbors('in','*',link)[0];/*newline*/print(neighbor);/*newline*/setAttr('name', 'confluence_'+String(link));/*newline*/",
			"targetType": "__pConfluence"
		},
		{
			"name": "nameSegment",
			"event": "post-connect",
			"code": "/* comment next line to enable this action */\nthrow \"IgnoredConstraint\"\nlet link = getNeighbors('out', '*')[0];/*newline*/print(link);/*newline*/let neighbor = getNeighbors('in','*',link)[0];/*newline*/print(neighbor);/*newline*/setAttr('name', 'segment_'+String(link));/*newline*/",
			"targetType": "__pConfluence"
		},
		{
			"name": "distinctPLabels",
			"event": "post-create",
			"code": "if( getAttr(\"__pLabel\") == \"\" )\n{\n\tvar pLabels = getAllNodes().\n\t\t\t\t\t\t\tfilter( function(n) {return hasAttr(\"__pLabel\",n);} ).\n\t\t\t\t\t\t\t\tmap( function(n) {return getAttr(\"__pLabel\",n);} ),\n\t\t i\t\t\t= \"0\";\n\n\twhile( _utils.contains(pLabels,i) )\n\t\ti = String(parseInt(i)+1);\n\tsetAttr(\"__pLabel\",i);\n}",
			"targetType": "*"
		}
	],
	"cardinalities": {
		"__pHasIn": [
			{
				"dir": "in",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pis_located_in",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pHasOut": [
			{
				"dir": "out",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pHasWatercraft": [
			{
				"dir": "in",
				"type": "__pis_located_in",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pWatercraft": [
			{
				"dir": "out",
				"type": "__pis_located_in",
				"min": 0,
				"max": "1"
			}
		],
		"__pSource": [
			{
				"dir": "out",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pSegment": [
			{
				"dir": "in",
				"type": "__pout1",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pin1",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pis_located_in",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pSink": [
			{
				"dir": "in",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pis_located_in",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pSchedule": [
			{
				"dir": "out",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pSchedulable": [
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__phigher_priority_than": [
			{
				"dir": "in",
				"type": "__pSchedulable",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSchedulable",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pSource",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSource",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pSink",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSink",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			}
		],
		"__pConfluence": [
			{
				"dir": "in",
				"type": "__pin1",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pout1",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pout1",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pin1",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pis_located_in",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pout0",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__phigher_priority_than",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__phighest_priority",
				"min": 0,
				"max": "1"
			}
		],
		"__pis_located_in": [
			{
				"dir": "in",
				"type": "__pWatercraft",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pHasWatercraft",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			}
		],
		"__pin1": [
			{
				"dir": "in",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			}
		],
		"__pout1": [
			{
				"dir": "in",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			}
		],
		"__pout0": [
			{
				"dir": "in",
				"type": "__pHasOut",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pHasIn",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pSource",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSink",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "in",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			}
		],
		"__pCurrItem": [
			{
				"dir": "out",
				"type": "__pcurr_item",
				"min": 0,
				"max": "1"
			}
		],
		"__pcurr_item": [
			{
				"dir": "in",
				"type": "__pCurrItem",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSchedulable",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSource",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSink",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			}
		],
		"__phighest_priority": [
			{
				"dir": "in",
				"type": "__pSchedule",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSchedulable",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSource",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSegment",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pSink",
				"min": 0,
				"max": "1"
			},
			{
				"dir": "out",
				"type": "__pConfluence",
				"min": 0,
				"max": "1"
			}
		]
	},
	"legalConnections": {
		"__pHasIn": {
			"__pHasIn": [
				"__pout0"
			],
			"__pSegment": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSink": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pConfluence": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			]
		},
		"__pHasOut": {
			"__pHasIn": [
				"__pout0"
			],
			"__pSegment": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSink": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pConfluence": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			]
		},
		"__pHasWatercraft": {
			"__pHasIn": [
				"__pout0"
			],
			"__pSegment": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSink": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pConfluence": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			]
		},
		"__pWatercraft": {
			"__pHasWatercraft": [
				"__pis_located_in"
			],
			"__pSegment": [
				"__pis_located_in"
			],
			"__pConfluence": [
				"__pis_located_in"
			]
		},
		"__pSource": {
			"__pHasIn": [
				"__pout0"
			],
			"__pSegment": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSink": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pConfluence": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			]
		},
		"__pSegment": {
			"__pConfluence": [
				"__pin1",
				"__pout0",
				"__phigher_priority_than"
			],
			"__pHasIn": [
				"__pout0"
			],
			"__pSegment": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSink": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			]
		},
		"__pSink": {
			"__pHasIn": [
				"__pout0"
			],
			"__pSegment": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSink": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pConfluence": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			]
		},
		"__pSchedule": {
			"__pSchedulable": [
				"__phighest_priority"
			],
			"__pSource": [
				"__phighest_priority"
			],
			"__pSegment": [
				"__phighest_priority"
			],
			"__pSink": [
				"__phighest_priority"
			],
			"__pConfluence": [
				"__phighest_priority"
			]
		},
		"__pSchedulable": {
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			],
			"__pSegment": [
				"__phigher_priority_than"
			],
			"__pSink": [
				"__phigher_priority_than"
			],
			"__pConfluence": [
				"__phigher_priority_than"
			]
		},
		"__pConfluence": {
			"__pSegment": [
				"__pout1",
				"__pout0",
				"__phigher_priority_than"
			],
			"__pConfluence": [
				"__pout1",
				"__pin1",
				"__pout0",
				"__phigher_priority_than"
			],
			"__pHasIn": [
				"__pout0"
			],
			"__pSink": [
				"__pout0",
				"__phigher_priority_than"
			],
			"__pSchedulable": [
				"__phigher_priority_than"
			],
			"__pSource": [
				"__phigher_priority_than"
			]
		},
		"__pCurrItem": {
			"__pSchedulable": [
				"__pcurr_item"
			],
			"__pSource": [
				"__pcurr_item"
			],
			"__pSegment": [
				"__pcurr_item"
			],
			"__pSink": [
				"__pcurr_item"
			],
			"__pConfluence": [
				"__pcurr_item"
			]
		}
	},
	"connectorTypes": {
		"__phigher_priority_than": "visual",
		"__pis_located_in": "visual",
		"__pin1": "visual",
		"__pout1": "visual",
		"__pout0": "visual",
		"__pcurr_item": "visual",
		"__phighest_priority": "visual"
	},
	"types2parentTypes": {
		"__pHasIn": [],
		"__pHasOut": [],
		"__pHasWatercraft": [],
		"__pWatercraft": [],
		"__pSource": [
			"__pSchedulable",
			"__pHasOut"
		],
		"__pSegment": [
			"__pSchedulable",
			"__pHasOut",
			"__pHasWatercraft",
			"__pHasIn"
		],
		"__pSink": [
			"__pSchedulable",
			"__pHasIn"
		],
		"__pSchedule": [],
		"__pSchedulable": [],
		"__phigher_priority_than": [],
		"__pConfluence": [
			"__pSchedulable",
			"__pHasOut",
			"__pHasWatercraft",
			"__pHasIn",
			"__pSegment"
		],
		"__pis_located_in": [],
		"__pin1": [],
		"__pout1": [],
		"__pout0": [],
		"__pCurrItem": [],
		"__pcurr_item": [],
		"__pGC_every_segment_in_schedule_at_most_once": [],
		"__pGC_no_watercraft_disappears": [],
		"__phighest_priority": []
	}
}